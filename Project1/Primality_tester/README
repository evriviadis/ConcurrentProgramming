CONCURRENT PROGRAMING - ASSIGNMENT SERIES 1 - PRIMALITY TESTER

DESCRIPTION
This program takes positive integers as input and checks if they are prime or not. What's special about this, is that main doesn't execute the checks. Instead, it assigns them to N worker threads that have been created to check the primality. In that way, the analysis becomes faster. Threads can check none, one or many numbers for primality. This depends on main's assignments, on how fast a thread finishes and if there are
many threads available to test numbers concurrently.


DEVELOPMENT ENVIRONMENT
Programming language: C
Operating System: Linux
Compiler: GCC


COMPILATION PROCESS
Ensure GCC is instaled:  sudo apt-get install gcc
Compile the program:
    On a terminal go to the directory named Primality_tester.
    Compile with the command "make".
    Then, the executable file named "primality_tester" is created.

    To compile without the "make" command it is necessary to:
    1. Compile seperately:  gcc -Wall -fsanitize=address -g -c primality_tester.c
                            gcc -Wall -fsanitize=address -g -c library.c -lm
    2. Link: gcc -Wall -fsanitize=address -g primality_tester.o library.o -o primality_tester -lm
 

RUNNING PROCESS
Create a file that contains positive integers seperated with ' ' or '\n'. 
Output can be displayed on screen (stdout) or it can be easily put on a file.
The output depicts if a number is prime (1) or if it is not (0).
Run the program with the command: ./primality_tester N < <file> > <out>


TEST CASES
To test the correctness - performance of our program we run it for small and big numbers.
First of all we create files with random integers (file1 = 100 int), (file2 = 500 int), (file3 = 2000 int)
Then we run the program by monitoring the executions for N=10, N=20, N=40 threads.


AUTHORS AND ACKNOWLEDGEMENT
~ Liapis Evriviadis 03646
~ Plytas Evaggelos 03674
~ Tsiaousi Aikaterini 03626